
before:
  hooks:
    - go mod download    
    - make test
builds:
- id: ibm-spectrum-exporter
  env:
    - CGO_ENABLED=0
  ldflags:
    - -s -w -X main.TAG={{.Version}} -X main.COMMIT={{.Commit}} -X main.VERSION={{.Version}} -X main.BUILDTIME={{.Date}}
  goarch:
     - amd64
archives:
- replacements:
    darwin: Darwin
    linux: Linux
    amd64: x86_64
checksum:
  name_template: 'checksums.txt'
snapshot:
  name_template: "{{ .Tag }}-next"
changelog:
  sort: asc
  filters:
    exclude:
    - '^docs:'
    - '^test:'
dockers:
  -
    # GOOS of the built binary that should be used.
    goos: linux

    # GOARCH of the built binary that should be used.
    goarch: amd64

    # Name templates of the built binaries that should be used.
    binaries:
    - ibm-spectrum-exporter

    # Build IDs to gather the binaries from.
    builds:
    - ibm-spectrum-exporter

    # Templates of the Docker image names.
    image_templates:
    - "topine/ibm-spectrum-exporter:latest"
    - "topine/ibm-spectrum-exporter:{{ .Tag }}"
    - "topine/ibm-spectrum-exporter:v{{ .Major }}"

    # Skips the docker push. Could be useful if you also do draft releases.
    # If set to auto, the release will not be pushed to the docker repository
    # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
    # Defaults to false.
    skip_push: false

    # Path to the Dockerfile (from the project root).
    dockerfile: Dockerfile

    # If your Dockerfile copies files other than the binary itself,
    # you should list them here as well.
    # Note that goreleaser will create the same structure inside the temporary
    # folder, so if you add `foo/bar.json` here, on your Dockerfile you can
    # `COPY foo/bar.json /whatever.json`.
    # Also note that the paths here are relative to the folder in which
    # goreleaser is being run.
    # This field does not support wildcards, you can add an entire folder here
    # and use wildcards when you `COPY`/`ADD` in your Dockerfile.
    extra_files:
    - metrics_conf.yaml